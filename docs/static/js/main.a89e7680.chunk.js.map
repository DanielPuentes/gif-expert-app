{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFechGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAehD,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKlB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAdhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,+BCPdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,0FAC0EC,UAC7FH,GAFmB,sBAKFI,MAAMF,GALJ,cAKfG,EALe,gBAMEA,EAAKC,OANP,uBAMbC,EANa,EAMbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAItCa,QAAQC,IAAIR,GAhBS,kBAiBdA,GAjBc,4CAAH,sDCEPS,EAAc,SAAC,GAAqB,EAApBN,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACpC,OACI,gCACI,qBAAKgB,IAAKhB,EAAKiB,IAAKP,IACpB,4BAAIA,QCFHQ,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECDd,SAACA,GAAc,IAAD,EACbd,mBAAS,CACjCqB,KAAM,GACNc,SAAS,IAH4B,mBAChCC,EADgC,KACzBC,EADyB,KAevC,OATAC,qBAAU,WACRzB,EAAQC,GAAUyB,MAAK,SAAAC,GACnBH,EAAS,CACLhB,KAAMmB,EACNL,SAAS,SAGhB,CAACrB,IAEGsB,EDbyBK,CAAY3B,GAAhCa,EAD2B,EAChCN,KAAac,EADmB,EACnBA,QAKpB,OACE,gCACE,6BAAKrB,IACJqB,GAAW,cACXR,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,WEXjBiB,EAAe,WAAO,IAAD,EACI1C,mBAAS,CAAC,cADd,mBACzB2C,EADyB,KACb5C,EADa,KAOhC,OACE,gCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAKG4C,EAAWpB,KAAI,SAACT,GACf,OAAO,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,U,MChB/B8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.a89e7680.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n  const [inputValue, setinputValue] = useState('');\r\n\r\n  const handleInputChange = (e) => {\r\n    setinputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if(inputValue.trim().length > 2){\r\n        setCategories(cats => [inputValue, ...cats]);\r\n        setinputValue('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\r\n    </form>\r\n  );\r\n};\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=ywl7Wt3OzA1CUdwG4SokRihSA5V1731k&q=${encodeURI(\r\n    category\r\n  )}&limit=10`;\r\n\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n\r\n  console.log(gifs);\r\n  return gifs;\r\n};\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    return (\r\n        <div>\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useFechGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  const {data:images, loading } = useFechGifs(category);\r\n  //   const [images, setImages] = useState([]);\r\n\r\n  //   getGifs();\r\n\r\n  return (\r\n    <div>\r\n      <h3>{category}</h3>\r\n      {loading && \"Cargando...\"}\r\n      {images.map((img) => (\r\n        <GifGridItem key={img.id} {...img} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFechGifs = (category) => {\r\n  const [state, setstate] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then(imgs => {\r\n        setstate({\r\n            data: imgs,\r\n            loading: false\r\n        });\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([\"One Punch\"]);\r\n  //   const categories = [\"One Punch\", \"Samurai X\", \"Dragon Ball\"];\r\n  //   const handleAdd = () => {\r\n  //     setCategories([...categories, 'Naruto'])\r\n  //   }\r\n\r\n  return (\r\n    <div>\r\n      <h1>GifExpertApp</h1>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n\r\n      {/* <button onClick={handleAdd}>Agregar</button> */}\r\n\r\n      {/* <ol> */}\r\n        {categories.map((category) => {\r\n          return <GifGrid key={category} category={category} />;\r\n        })}\r\n      {/* </ol> */}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}